AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway + Lambdas CRUD conectados a DynamoDB (sin AWS_PROXY)

Parameters:
  ############################
  # Parámetros del Stack
  ############################
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
    Description: Nombre del ambiente a desplegar (dev, qa, prod)

  LambdaCodeBucketName:
    Type: String
    Description: S3 bucket donde está el código de las lambdas

  LambdaCodeKey:
    Type: String
    Default: lambda-code.zip
    Description: Nombre del archivo zip de la lambda en S3

  LambdaExecutionRoleArn:
    Type: String
    Description: ARN del rol de ejecución para las lambdas

  ItemsTableName:
    Type: String
    Default: ItemsTable
    Description: Nombre de la tabla DynamoDB

Resources:

  ############################
  # API Gateway (REST API)
  ############################
  ItemsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ItemsApi-${Environment}

  # Recurso raíz "/items"
  ItemsApiRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ItemsApi
      ParentId: !GetAtt ItemsApi.RootResourceId
      PathPart: items

  # Recurso anidado "/items/{id}"
  ItemsApiItem:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ItemsApi
      ParentId: !Ref ItemsApiRoot
      PathPart: "{id}"

  ############################
  # CREATE Lambda
  ############################
  # Lambda para crear un ítem en DynamoDB
  CreateItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CreateItemFunction-${Environment}
      Handler: src/index.createItemsHandler
      Runtime: nodejs18.x
      Timeout: 10
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemsTableName

  # Método POST /items
  CreateItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ItemsApi
      ResourceId: !Ref ItemsApiRoot
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        # Vincula API Gateway con la Lambda
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateItemFunction.Arn}/invocations
        RequestTemplates:
          application/json: |
            {
              "operation": "create",
              "body": $input.body
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                $input.body
      MethodResponses:
        - StatusCode: 200

  # Permiso para que API Gateway invoque la Lambda
  CreateItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateItemFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ItemsApi}/*/POST/items

  ############################
  # READ Lambda
  ############################
  # Lambda para leer un ítem por id
  ReadItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ReadItemFunction-${Environment}
      Handler: src/index.readItemHandler
      Runtime: nodejs18.x
      Timeout: 10
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemsTableName

  # Método GET /items/{id}
  ReadItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ItemsApi
      ResourceId: !Ref ItemsApiItem
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadItemFunction.Arn}/invocations
        RequestTemplates:
          application/json: |
            {
              "operation": "read",
              "id": "$input.params('id')"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                $input.body
      MethodResponses:
        - StatusCode: 200

  ReadItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReadItemFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ItemsApi}/*/GET/items/*

  ############################
  # UPDATE Lambda
  ############################
  # Lambda para actualizar un ítem por id
  UpdateItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub UpdateItemFunction-${Environment}
      Handler: src/index.updateItemHandler
      Runtime: nodejs18.x
      Timeout: 10
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemsTableName

  # Método PUT /items/{id}
  UpdateItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ItemsApi
      ResourceId: !Ref ItemsApiItem
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateItemFunction.Arn}/invocations
        RequestTemplates:
          application/json: |
            {
              "operation": "update",
              "id": "$input.params('id')",
              "body": $input.body
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                $input.body
      MethodResponses:
        - StatusCode: 200

  UpdateItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateItemFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ItemsApi}/*/PUT/items/*

  ############################
  # DELETE Lambda
  ############################
  # Lambda para eliminar un ítem por id
  DeleteItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub DeleteItemFunction-${Environment}
      Handler: src/index.deleteItemHandler
      Runtime: nodejs18.x
      Timeout: 10
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemsTableName

  # Método DELETE /items/{id}
  DeleteItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ItemsApi
      ResourceId: !Ref ItemsApiItem
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteItemFunction.Arn}/invocations
        RequestTemplates:
          application/json: |
            {
              "operation": "delete",
              "id": "$input.params('id')"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                $input.body
      MethodResponses:
        - StatusCode: 200

  DeleteItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteItemFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ItemsApi}/*/DELETE/items/*

  ############################
  # LIST Lambda
  ############################
  # Lambda para listar todos los ítems
  ListItemsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ListItemsFunction-${Environment}
      Handler: src/index.listItemsHandler
      Runtime: nodejs18.x
      Timeout: 10
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemsTableName

  # Método GET /items
  ListItemsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ItemsApi
      ResourceId: !Ref ItemsApiRoot
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListItemsFunction.Arn}/invocations
        RequestTemplates:
          application/json: |
            {
              "operation": "list"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                $input.body
      MethodResponses:
        - StatusCode: 200

  ListItemsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ListItemsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ItemsApi}/*/GET/items

Outputs:
  ############################
  # Salidas del Stack
  ############################
  ApiId:
    Value: !Ref ItemsApi
    Export:
      Name: !Sub ItemsApiId-${Environment}