AWSTemplateFormatVersion: '2010-09-09'
Description: Infraestructura base para CRUD (S3, DynamoDB, IAM) separada por ambiente

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Nombre del ambiente (dev, test, prod)
    # üîπ Permite desplegar la misma infraestructura en distintos ambientes
    #    usando un par√°metro (ejemplo: dev, test, prod).
    #    Esto afecta los nombres de recursos para evitar conflictos.

Resources:

  ############################
  # S3 Bucket para almacenar el c√≥digo de Lambda
  ############################
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub code-challenges-serverless-guru-${Environment}
      #  Cada ambiente tendr√° un bucket √∫nico, ej:
      #    - code-challenges-serverless-guru-dev
      #    - code-challenges-serverless-guru-test
      #    - code-challenges-serverless-guru-prod

  ############################
  # DynamoDB Table para CRUD de items
  ############################
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ItemsTable-${Environment}
      # Separa las tablas por ambiente (ItemsTable-dev, ItemsTable-test, etc.)
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S   # La clave primaria ser√° un string
      KeySchema:
        - AttributeName: id
          KeyType: HASH      # id se usa como clave de partici√≥n
      BillingMode: PAY_PER_REQUEST
      #  Modo bajo demanda ‚Üí no requiere provisionar capacidad.

  ############################
  # IAM Role para ejecuci√≥n de Lambda
  ############################
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub LambdaCrudExecutionRole-${Environment}
      # Role diferenciado por ambiente
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
              #  Solo los servicios de Lambda pueden asumir este role
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub LambdaCrudPolicy-${Environment}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              #  Permisos sobre DynamoDB
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: !GetAtt ItemsTable.Arn
              # Permisos para logs en CloudWatch
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

Outputs:
  # Exporta los valores clave para ser reutilizados en otros stacks
  BucketName:
    Value: !Ref LambdaCodeBucket
    Export:
      Name: !Sub LambdaCodeBucketName-${Environment}

  TableName:
    Value: !Ref ItemsTable
    Export:
      Name: !Sub ItemsTableName-${Environment}

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub LambdaExecutionRoleArn-${Environment}